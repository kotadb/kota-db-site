name: Core Quality Gates

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

jobs:
  core-gates:
    name: Core Quality Checks
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        with:
          version: 9

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type checking
        run: pnpm typecheck

      - name: Linting
        run: pnpm lint

      - name: Format check
        run: pnpm format:check

      - name: Check for console.log statements
        run: |
          MATCHES=$(grep -R "console\.log\(" apps \
            --include='*.ts' --include='*.tsx' --include='*.js' --include='*.jsx' \
            --exclude-dir='testing' --exclude-dir='__tests__' --exclude-dir='observability' | \
            grep '/src/' || true)
          if [ -n "$MATCHES" ]; then
            echo "Error: console.log statements found (outside exceptions):" >&2
            echo "$MATCHES" >&2
            exit 1
          fi

      - name: Check for absolute imports (warning-only)
        run: |
          ABS=$(grep -R "from ['\"]/" apps \
            --include='*.ts' --include='*.tsx' --include='*.js' --include='*.jsx' | \
            grep '/src/' || true)
          if [ -n "$ABS" ]; then
            echo "Warning: Absolute path imports detected. Prefer @/ alias." >&2
            echo "$ABS" >&2
          fi

      - name: Build
        env:
          NEXT_PUBLIC_SUPABASE_URL: https://example.com
          NEXT_PUBLIC_SUPABASE_ANON_KEY: test_anon_key
          NEXT_PUBLIC_APP_URL: https://example.com
          NEXT_PUBLIC_DASHBOARD_URL: https://example.com
        run: pnpm build

      - name: Unit tests (app only)
        run: pnpm --filter @kotadb/app test

      - name: Test coverage (app only)
        run: pnpm --filter @kotadb/app test:coverage

      - name: Upload coverage reports
        if: ${{ env.CODECOV_TOKEN != '' }}
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
