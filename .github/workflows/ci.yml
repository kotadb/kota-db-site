name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Tier 1: Core Quality Gates
  core-quality:
    name: Core Quality Gates
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        with:
          version: 9

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Format check
        run: pnpm format:check

      - name: Lint check
        run: pnpm lint

      - name: Type check
        run: pnpm typecheck

      - name: Build
        env:
          NEXT_PUBLIC_SUPABASE_URL: https://example.com
          NEXT_PUBLIC_SUPABASE_ANON_KEY: test_anon_key
          NEXT_PUBLIC_APP_URL: https://example.com
          NEXT_PUBLIC_DASHBOARD_URL: https://example.com
        run: pnpm build

      - name: Check for console.log (excluding testing/observability)
        run: |
          # Search only within src directories of apps/** and exclude known safe folders
          MATCHES=$(grep -R "console\.log\(" apps \
            --include='*.ts' --include='*.tsx' --include='*.js' --include='*.jsx' \
            --exclude-dir='testing' --exclude-dir='__tests__' --exclude-dir='observability' | \
            grep '/src/' || true)
          if [ -n "$MATCHES" ]; then
            echo "Error: console.log statements found (outside exceptions):" >&2
            echo "$MATCHES" >&2
            exit 1
          fi

  # Tier 2: Advanced Quality Gates
  advanced-quality:
    name: Advanced Quality Gates
    runs-on: ubuntu-latest
    needs: core-quality

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        with:
          version: 9

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Security audit
        run: pnpm audit --audit-level=high
        continue-on-error: true

      - name: Check bundle size
        env:
          NEXT_PUBLIC_SUPABASE_URL: https://example.com
          NEXT_PUBLIC_SUPABASE_ANON_KEY: test_anon_key
          NEXT_PUBLIC_APP_URL: https://example.com
          NEXT_PUBLIC_DASHBOARD_URL: https://example.com
        run: |
          pnpm build
          # Add bundle size checking logic here when implemented

      - name: Dependency check
        run: |
          npx depcheck
        continue-on-error: true

  # Tier 3: Production Gates (only for main branch)
  production-gates:
    name: Production Quality Gates
    runs-on: ubuntu-latest
    needs: [core-quality, advanced-quality]
    if: github.ref == 'refs/heads/main' || github.base_ref == 'main'

    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        with:
          version: 9

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Production build
        run: |
          NODE_ENV=production pnpm build

      - name: Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: |
            http://localhost:3000
          uploadArtifacts: true
          temporaryPublicStorage: true
        continue-on-error: true

      - name: Check TypeScript strict mode compliance
        run: |
          echo "Checking for any TypeScript strict mode violations..."
          pnpm typecheck

      - name: Validate commit messages
        if: github.event_name == 'pull_request'
        run: |
          # Check that all commits follow conventional commits
          git log --format=%s origin/${{ github.base_ref }}..HEAD | while read commit; do
            if ! echo "$commit" | grep -qE '^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\(.+\))?!?: .+$'; then
              echo "Invalid commit message: $commit"
              exit 1
            fi
          done

  # Label PR automatically
  label:
    name: Label Pull Request
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    permissions:
      contents: read
      pull-requests: write

    steps:
      - uses: actions/labeler@v5
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"

      - uses: codelytv/pr-size-labeler@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          xs_label: "effort: small"
          s_label: "effort: small"
          m_label: "effort: medium"
          l_label: "effort: large"
          xl_label: "effort: large"
